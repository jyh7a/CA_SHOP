{"version":3,"sources":["serviceWorker.js","index.js","data.js","Cart.js","App.js"],"names":["Boolean","window","location","hostname","match","initState","id","name","quan","store","createStore","combineReducers","reducer","state","action","type","indexNum","findIndex","v","payload","_state","push","data","alertReducer","ReactDOM","render","basename","process","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","title","content","price","connect","memo","props","useEffect","log","alertState","className","Table","responsive","map","i","key","onClick","dispatch","alertClose","Detail","lazy","stockContext","React","createContext","Card","useContext","shoes","index","history","useHistory","src","width","Test","stock","useState","Data","setShose","setStock","more","setMore","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","exact","path","Jumbotron","Button","variant","Provider","value","axios","get","result","err","_shoes","fallback"],"mappings":"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","file":"static/js/main.35500476.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter} from 'react-router-dom'\n// import {HashRouter} from 'react-router-dom'\n\nimport {Provider} from 'react-redux'\nimport { createStore, combineReducers } from 'redux';\n\nlet alertState = true\n\nlet alertReducer = (state = alertState, action) => {\n  if(action.type === 'alertClose'){\n    state = false\n    return state\n  }else{\n    return state\n  }\n}\n\nlet initState = [\n  {\n    id:0,\n    name: 'White and Black',\n    quan: 0 \n  },\n  {\n    id:1,\n    name: 'Red Knit',\n    quan: 0 \n  },\n  {\n    id:2,\n    name: 'Grey Yordan',\n    quan: 0 \n  }\n]\n\nlet reducer = (state = initState, action) => {\n  if(action.type === 'addList'){\n    const indexNum = state.findIndex((v)=>{\n      return v.id === action.payload.id\n    })\n    if(indexNum >= 0){\n      let _state = [...state]\n      _state[indexNum].quan++\n      return _state    \n    }else{\n      let _state = [...state]\n      _state.push(action.payload)\n      return _state\n    }\n  }else if(action.type === '수량증가'){\n    let _state = [...state]\n    _state[action.data].quan++\n    return _state\n  }else if(action.type === '수량감소'){\n    let _state = [...state]\n    if(_state[action.data].quan > 0) _state[action.data].quan--\n    return _state\n  }else{\n    return state\n  }\n}\n\nlet store = createStore(combineReducers({reducer, alertReducer}))\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default [\r\n  {\r\n    id : 0,\r\n    title : \"White and Black\",\r\n    content : \"Born in France\",\r\n    price : 120000\r\n  },\r\n\r\n  {\r\n    id : 1,\r\n    title : \"Red Knit\",\r\n    content : \"Born in Seoul\",\r\n    price : 110000\r\n  },\r\n\r\n  {\r\n    id : 2,\r\n    title : \"Grey Yordan\",\r\n    content : \"Born in the States\",\r\n    price : 130000\r\n  }\r\n] \r\n\r\n// var name = '1';\r\n// var name2 = '2';\r\n\r\n// export {name, name2}","import React, { useEffect, memo } from 'react';\r\nimport {Table} from 'react-bootstrap'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './Detail.scss'\r\n\r\nconst Cart = (props) => {\r\n\r\n  const alertClose = (v) => {\r\n    props.dispatch({type: '수량감소',  data: v.id})\r\n  }\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      <Table  responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>상품명</th>\r\n            <th>수량</th>\r\n            <th>변경</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            props.state.map((v, i) => {\r\n              if(v.quan > 0){\r\n                return (\r\n                  <tr key={i}>\r\n                    <td>{v.id}</td>\r\n                    <td>{v.name}</td>\r\n                    <td>{v.quan}</td>\r\n                    <td>\r\n                      <button onClick={()=>{ props.dispatch({type: '수량증가', data: v.id}) }}>+</button>\r\n                      <button className=\"ml-1\" onClick={()=>{ props.dispatch(alertClose(v)) }}>-</button>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              }else{\r\n                return null\r\n              }\r\n             \r\n            })\r\n          }\r\n        </tbody>\r\n      </Table>\r\n\r\n      {\r\n        props.alertState === true\r\n        ? <div className=\"my-alert2\">\r\n            <p>\r\n              지금 구매하시면 신규할인 20% \r\n              <button className=\"x-button float-right\" onClick={()=>{props.dispatch({type: 'alertClose'})}}>&times;</button>\r\n            </p>\r\n            \r\n          </div>\r\n        : null\r\n      }\r\n\r\n      {/* <Parent 이름=\"정영훈\" 나이=\"32\"/> */}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Parent = (props) => {\r\n  console.log(props)\r\n  return (\r\n    <div>\r\n      <Child1 이름={props.이름}></Child1>\r\n      <Child2 나이={props.나이}></Child2>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Child1 = (props) => {\r\n  useEffect(() => {console.log('랜더링됨1')})\r\n  return <div>1111</div>\r\n}\r\n\r\nconst Child2 = memo((props) => {\r\n  useEffect(() => {console.log('랜더링됨2')})\r\n  return <div>2222</div>\r\n})\r\n\r\n\r\n\r\nconst stateToProps = (state) => {\r\n  return {\r\n    state: state.reducer,\r\n    alertState: state.alertReducer\r\n  }\r\n}\r\n\r\nexport default connect(stateToProps)(Cart)\r\n\r\n// export default Cart","/* eslint-disable */\n\nimport React, {useState, useContext, lazy, Suspense}from 'react'\nimport {Navbar, Nav, NavDropdown, Jumbotron, Button} from 'react-bootstrap'\nimport './App.css'\nimport Data from './data'\nimport {Link, Route, Switch, useHistory} from 'react-router-dom'\n// import Detail from './Detail'\nlet Detail = lazy(() => import('./Detail'))\nimport axios from 'axios'\nimport Cart from './Cart'\n\nexport const stockContext = React.createContext();\n\nfunction App() {\n\n  const [shoes, setShose] = useState(Data);\n  const [stock, setStock] = useState([10, 11, 12])\n  const [more, setMore] = useState(0)\n\n  return (\n  <div className='App'>\n  \n  <Navbar bg=\"light\" expand=\"lg\" className=''>\n    <Navbar.Brand as={Link} to=\"/\">ShoeShop</Navbar.Brand>\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n    <Navbar.Collapse id=\"basic-navbar-nav\">\n      <Nav className=\"ml-auto\">\n        <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n        <NavDropdown title=\"Detail\" id=\"basic-nav-dropdown\">\n          <NavDropdown.Item as={Link} to=\"/detail/0\">Detail-0</NavDropdown.Item>\n          <NavDropdown.Item as={Link} to=\"/detail/1\">Detail-1</NavDropdown.Item>\n          <NavDropdown.Item as={Link} to=\"/detail/2\">Detail-2</NavDropdown.Item>\n        </NavDropdown>\n        <Nav.Link as={Link} to=\"/cart\">Cart</Nav.Link>\n      </Nav>\n    </Navbar.Collapse>\n  </Navbar>\n\n  <Switch>\n    <Route exact path='/'>\n      <Jumbotron className=\"background\">\n        <h1>20% Season OFF</h1>\n        <p>\n          This is a simple hero unit, a simple jumbotron-style component for calling\n          extra attention to featured content or information.\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn more</Button>\n        </p>\n      </Jumbotron>\n\n      <div className='container'>\n        <stockContext.Provider value={stock}>\n          <div className=\"row\">\n            {\n              shoes.map((v, i)=>{\n                return <Card shoes={v} index={i+1} key={i}/>\n              })\n            }\n          </div>\n        </stockContext.Provider>\n        {\n          more === 0 \n          ? <button className=\"btn btn-primary\" onClick={()=>{\n              setMore(1);\n              // axios.post('서버URL', {id:'codingapple', pw:1234})\n    \n              // fetch('https://codingapple1.github.io/shop/data2.json').then()\n              axios.get('https://codingapple1.github.io/shop/data2.json')\n              .then((result)=>{\n                setShose([...shoes, ...result.data]);\n              })\n              .catch((err)=>{console.log(err)})\n            }}>더보기</button>\n          : <button className=\"btn btn-primary\" onClick={()=>{\n              setMore(0);\n              let _shoes = []\n              _shoes.push(shoes[0])\n              _shoes.push(shoes[1])\n              _shoes.push(shoes[2])\n              setShose(_shoes)\n          }}>닫기</button>\n        }\n     \n      </div>  \n    </Route>\n\n    <Route path='/detail/:id'>\n      <stockContext.Provider value={stock}>\n        <Suspense fallback={<div>Loding...</div>}>\n          <Detail shoes={shoes} stock={stock} setStock={setStock}/>\n        </Suspense>\n      </stockContext.Provider>  \n    </Route>\n\n    <Route path='/cart'>\n      <Cart />\n    </Route>\n\n    {/* <Route path=\"/:id\">\n      <div>아무거나 적었을때 보여줌</div>\n    </Route> */}\n\n    {/* <Route path=\"/some\" component={Card}></Route> */}\n  </Switch>\n  \n  </div>\n  );\n}\n\nconst Card = (props) => {\n  const stock = useContext(stockContext)\n  const shoes = {...props.shoes}\n  const index = props.index\n  const history = useHistory()\n\n  return(\n    <div className=\"col-md-4 shoe-card\" onClick={()=>{history.push(`/detail/${shoes.id}`)}}>\n      <img src={`https://codingapple1.github.io/shop/shoes${index}.jpg`} width=\"100%\"/>\n      <h4>{shoes.title}</h4>\n      <p>{shoes.content} & {shoes.price}</p>\n      <Test i={index-1}></Test>\n    </div>\n  )\n}\n\nconst Test = (props) => {\n  const stock = useContext(stockContext)\n  return <p>재고 : {stock[props.i] ? stock[props.i] : 0}</p>\n}\n\nexport default App;\n"],"sourceRoot":""}